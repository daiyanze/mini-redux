{"version":3,"sources":["mini-redux/applyMiddleware.js","mini-redux/combineReducers.js","store/index.js","mini-redux/createStore.js","middlewares/redux-thunk.js","middlewares/redux-logger.js","components/MiniReduxComp.js","App.js","index.js"],"names":["compose","funcs","reduceRight","composed","f","mapValues","obj","fn","Object","keys","reduce","result","key","reducers","store","createStore","reducer","enhancer","currentState","currentListeners","dispatch","action","forEach","listener","type","getState","subscribe","push","index","indexOf","splice","count","state","payload","double","middlewares","next","initialState","middlewareAPI","chain","map","middleware","applyMiddleware","console","log","prevState","returnValue","nextState","MiniReduxComp","plus","minus","multiply","setTimeout","divide","this","unsubscribe","forceUpdate","onClick","Component","App","className","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.28ca72a1.chunk.js","sourcesContent":["\nfunction compose(...funcs) {\n  return funcs.reduceRight((composed, f) => f(composed));\n}\n\nexport default function applyMiddleware(...middlewares) {\n  return next => (reducer, initialState) => {\n    const store = next(reducer, initialState);\n    let dispatch = store.dispatch;\n    const middlewareAPI = {\n      getState: store.getState,\n      dispatch: action => dispatch(action)\n    };\n    const chain = middlewares.map(middleware => middleware(middlewareAPI));\n\n    // Enhance the `dispatchers` by applying middlewares to each of them\n    dispatch = compose(...chain, store.dispatch);\n\n    return {\n      ...store,\n      dispatch\n    };\n  };\n}\n","function mapValues(obj, fn) {\n  return Object.keys(obj).reduce((result, key) => {\n    result[key] = fn(obj[key], key);\n    return result;\n  }, {});\n}\n\nexport default function combineReducers (reducers) {\n  return function combination (state = {}, action) {\n    // Official Redux uses `pick` on filtering reducers.\n    // Let's trust reducers are functions here\n    return mapValues(reducers, (reducer, key) => reducer(state[key], action))\n  };\n}\n","import { createStore, applyMiddleware, combineReducers } from \"../mini-redux/\"\nimport { thunk, logger } from '../middlewares'\n\nfunction addMinusReducer(state = 0, action) {\n  switch (action.type) {\n    case \"PLUS\":\n      return state + 1;\n    case \"MINUS\":\n      return state - (action.payload || 1);\n    default:\n      return state;\n  }\n}\n\nfunction MultiplyDivideReducer (state = 2, action) {\n  switch (action.type) {\n    case \"MULTIPLY\":\n      return state * 2;\n    case \"DIVIDE\":\n      return state / 2;\n    default:\n      return state;\n  }\n}\n\nconst store = createStore(\n  combineReducers({\n    count: addMinusReducer,\n    double: MultiplyDivideReducer\n  }),\n  applyMiddleware(thunk, logger)\n);\n\nexport default store;\n","export default function createStore (reducer, enhancer) {\n  if (enhancer) {\n    return enhancer(createStore)(reducer);\n  }\n\n  let currentState;\n  // Redux now uses a shallow copy `nextListeners` via `ensureCanMutateNextListeners()`\n  // to prevent bugs in the middle of `dispatch`\n  let currentListeners = [];\n\n  function getState () {\n    return currentState;\n  }\n\n  // Register callbacks to execute after changes\n  function subscribe (listener) {\n    currentListeners.push(listener);\n\n    return () => {\n      // empty listeners\n      const index = currentListeners.indexOf(listener);\n      currentListeners.splice(index, 1);\n    };\n  }\n\n  function dispatch (action) {\n    currentState = reducer(currentState, action);\n    // state changes, notify to invoke callbacks\n    currentListeners.forEach(listener => listener());\n  }\n\n  // Initialize Redux by calling a virtual reducer\n  dispatch({ type: \"MY-MINI-REDUX\" });\n\n  return {\n    getState,\n    dispatch,\n    subscribe\n  };\n}\n","\n// Allow passing function to dispatch\nexport default function thunk({ dispatch, getState }) {\n  return next => action => {\n    if (typeof action === \"function\") {\n      return action(dispatch, getState);\n    }\n\n    return next(action);\n  };\n}\n","\n// Output the previous and current state in console\nexport default function logger({ getState }) {\n  return next => action => {\n    console.log(\"======== Redux Logger ========\");\n\n    console.log(\"Action Type: \", action.type);\n\n    const prevState = getState();\n    console.log(\"Prev: \", prevState);\n\n    const returnValue = next(action);\n\n    const nextState = getState();\n    console.log(\"Next: \", nextState);\n    console.log(\"==============================\");\n    return returnValue;\n  };\n}\n","import React, { Component } from 'react';\nimport store from '../store'\n\nexport default class MiniReduxComp extends Component {\n\n  componentDidMount() {\n    this.unsubscribe = store.subscribe(() => this.forceUpdate());\n  }\n\n  componentWillUnmount() {\n    this.unsubscribe && this.unsubscribe();\n  }\n\n  plus = () => store.dispatch({ type: \"PLUS\" })\n\n  minus = () => store.dispatch({ type: 'MINUS' })\n\n  multiply = () => store.dispatch((dispatch, getState) => {\n    setTimeout(() => {\n      dispatch({ type: 'MULTIPLY' })\n    }, 300)\n  })\n\n  divide = () => store.dispatch((dispatch, getState) => {\n    setTimeout(() => {\n      dispatch({ type: 'DIVIDE' })\n    }, 300)\n  })\n\n  render() {\n    return (\n      <div>\n        <h4>Plus / Minus 1</h4>\n\n        <p>{store.getState().count}</p>\n\n        <button onClick={this.plus}>+1</button>\n        <button onClick={this.minus}>-1</button>\n\n        <br />\n        <br />\n\n        <h4>Multiply / Divide 2 (0.3s delay)</h4>\n        <p>{store.getState().double}</p>\n\n        <button onClick={this.multiply}>x2</button>\n        <button onClick={this.divide}>/2</button>\n      </div>\n    );\n  }\n}\n","import React from 'react'\nimport './App.css'\nimport MiniReduxComp from './components/MiniReduxComp'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MiniReduxComp />\n    </div>\n  );\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}